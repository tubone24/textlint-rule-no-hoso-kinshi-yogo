{"version":3,"sources":["../src/index.ts"],"names":["fs","require","referenceUrl","dictionaryPath","process","env","maxAge","readDictionaryFromCache","ignoreMaxAge","console","log","stats","statSync","Date","getTime","mtime","readFileSync","toString","getDictionary","text","Error","dictionary","fastXmlParser","parse","ignoreAttributes","reporter","context","fixer","getSource","report","RuleError","Syntax","Str","node","tokens","housouKinshiYougoList","forEach","surface_form","word_position","dirtyWord","notes","replaceWordList","word","index","replaceWordArray","Array","ruleError","map","join","fix","length","replaceTextRange","undefined","module","linter"],"mappings":"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","sourcesContent":["import 'isomorphic-fetch';\n\nimport { TextlintRuleModule, TextlintRuleReporter } from '@textlint/types';\nimport fastXmlParser from 'fast-xml-parser';\nconst fs = require('fs');\nimport { tokenize } from \"kuromojin\";\n\nconst referenceUrl = 'http://monoroch.net/kinshi/';\nconst dictionaryPath = `${process.env[\"RUNNER_TMP\"]}/housouKinshiYougo.xml`;\nconst maxAge = 604800;\n\ninterface Word {\n  ['#text']?: string;\n}\n\ninterface Dictionary {\n  housouKinshiYougoList?: {\n    dirtyWord?: {\n      notes?: string;\n      replaceWordList?: {\n        word?: Word | Word[];\n      };\n      word?: Word;\n    }[];\n  };\n}\n\nconst readDictionaryFromCache = ({ ignoreMaxAge = false }: { ignoreMaxAge?: boolean }) => {\n  console.log(dictionaryPath);\n  try {\n    const stats = fs.statSync(dictionaryPath);\n\n    if (ignoreMaxAge || new Date().getTime() - stats.mtime.getTime() < maxAge * 1000) {\n      return fs.readFileSync(dictionaryPath).toString();\n    }\n  } catch { }\n\n  return;\n}\n\nconst getDictionary = async () => {\n  const text = readDictionaryFromCache({ ignoreMaxAge: true });\n\n  if (!text) {\n    throw new Error('辞書データを取得できませんでした。');\n  }\n\n  const dictionary: Dictionary = fastXmlParser.parse(text, { ignoreAttributes: false });\n\n  return dictionary;\n}\n\nconst reporter: TextlintRuleReporter = (context) => {\n  const { fixer, getSource, report, RuleError, Syntax } = context;\n\n  return {\n    async [Syntax.Str](node) {\n      const text = getSource(node);\n      const tokens = await tokenize(text);\n      const { housouKinshiYougoList } = await getDictionary();\n\n      tokens.forEach(({ surface_form, word_position }) => {\n        housouKinshiYougoList?.dirtyWord?.forEach(({ notes, replaceWordList, word }) => {\n          if (surface_form !== word?.[\"#text\"]) {\n            return;\n          }\n\n          const index = word_position - 1;\n\n          const replaceWordArray = replaceWordList?.word instanceof Array\n            ? replaceWordList.word : replaceWordList?.word && [replaceWordList.word];\n\n          const ruleError = new RuleError(\n            [\n              `放送禁止用語「${word[\"#text\"]}」が含まれています。`,\n              ...replaceWordArray && [`言い換え語: ${replaceWordArray.map((word) => word[\"#text\"]).join(', ')}`] || [],\n              ...notes && [`備考: ${notes}`] || [],\n              `参照: ${referenceUrl}`\n            ].join('　'),\n            {\n              index,\n              fix: replaceWordArray?.length === 1 && replaceWordArray[0][\"#text\"] && fixer.replaceTextRange(\n                [index, index + word[\"#text\"].length],\n                replaceWordArray[0][\"#text\"]\n              ) || undefined\n            }\n          );\n\n          report(node, ruleError);\n        });\n      });\n    }\n  }\n};\n\nconst module: TextlintRuleModule = {\n  fixer: reporter,\n  linter: reporter\n};\n\nexport default module;\n"],"file":"index.js"}